"use strict";

var _fs = _interopRequireDefault(require("fs"));

var _lodash = require("lodash");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var hooks = {};

var walkSync = function walkSync(dir, filelist) {
  var files = _fs["default"].readdirSync(dir);

  filelist = filelist || [];
  files.forEach(function (file) {
    if (_fs["default"].statSync(dir + file).isDirectory()) {
      filelist = walkSync(dir + file + '/', filelist);
    } else {
      filelist.push(dir + file);
    }
  });
  return filelist;
};

var readFile = function readFile(file) {
  var contents = _fs["default"].readFileSync(file, 'utf8');

  var hooks = contents.match(/\.hook-[^\(|;|{]+/g);
  return [].concat.apply([], hooks);
};

var findHooks = function findHooks(file) {
  var contents = _fs["default"].readFileSync(file, 'utf8');

  var hooks = contents.match(/\.hook-[^\(|;|{]+/g);
  return hooks;
};

var createSnippet = function createSnippet(hook) {
  hooks[hook.replace('.', '').trim()] = {
    'prefix': '.hook-',
    'body': ["".concat(hook.trim(), "() {"), '\t$0', '}'],
    'description': "Hook ".concat(hook.trim())
  };
};

(function () {
  var files = walkSync('C:/Deskbox/V10/01.1 Core Mobile/src/', []);
  var array = files.filter(findHooks).map(readFile);
  (0, _lodash.uniq)([].concat.apply([], array)).forEach(createSnippet);
  console.log(hooks);
})();